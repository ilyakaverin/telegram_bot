import dayjs from "dayjs";
import { get_new_user_request_params } from "./utils";
import { add_user, get_user } from "./api";

export const start_response = (supabase) => async (context) => {
	try {
		const { data, error } = await supabase
			.from("space_created_clients")
			.upsert(
				{
					id: context.from.id,
					username: context.from.username || `user_${context.from.id}`,
				},
				{ onConflict: "id" },
			)
			.select();

		const isNew = data[0].expiration === null;

		if (isNew) {
			const payload = get_new_user_request_params(context.from.username, dayjs().unix());
			const response = await add_user(payload);

			const { error } = await supabase.from("space_created_clients").upsert(
				{
					id: context.from.id,
					expiration: response.expire,
				},
				{ onConflict: "id" },
			);

			if (error) throw error;

			return context.send(
				`–ü—Ä–∏–≤–µ—Ç, ${context.from.username}! –í–æ—Ç —Ç–≤–æ–π –∫–ª—é—á\n${response.subscription_url}\n–£ —Ç–µ–±—è –µ—Å—Ç—å 2 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –º–µ–Ω—é`,
			);
		}

		if (error) throw error;

		await context.send(`–ü—Ä–∏–≤–µ—Ç, ${context.from.username}!\n –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è.`);
	} catch (error) {
		console.error("–ß—Ç–æ-–ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫", JSON.stringify(error));
		context.send("–ß—Ç–æ-–ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫");
	}
};

export const help_response = (context) => {
	return context.send("–†–∞–∑–¥–µ–ª –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è");
};

export const buy_response = (supabase) => async (context) => {
	try {
		const { data, error } = await supabase.from("space_created_clients").select("price, expiration").eq("id", context.from.id);

		await context.bot.api.sendInvoice({
			chat_id: context.chat.id,
			title: "1 –º–µ—Å—è—Ü –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è vpn",
			description: `C—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${data[0].price} üåü. –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.`,
			payload: {
				createdAt: context.createdAt,
				expiration: data[0].expiration,
				order: Bun.randomUUIDv7(),
			},
			currency: "XTR",
			protect_content: true,
			prices: [{ label: "1 –ú–µ—Å—è—Ü", amount: data[0].price }],
		});

		if (error) throw error;
	} catch (e) {
		console.log(e);

		context.send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
	}
};

export const profile_response = async (context) => {
	try {
		const response = await get_user(context.from.username);

		context.send(`–ö–ª—é—á: ${response.subscription_url}\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${dayjs.unix(response.expire).format("DD.MM.YYYY")}`);
	} catch (e) {
		console.log(e);
		context.send("–û—à–∏–±–∫–∞");
	}
};
